/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";

const packageName = "";
const packageVersion = "";

export class DataLakeStorageClientContext extends msRest.ServiceClient {
  xMsVersion?: string;
  accountName: string;
  dnsSuffix?: string;

  /**
   * @class
   * Initializes a new instance of the DataLakeStorageClientContext class.
   * @constructor
   *
   * @param {string} accountName - The Azure Storage account name.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.xMsVersion] - Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization.
   *
   * @param {string} [options.dnsSuffix] - The DNS suffix for the Azure Data Lake Storage endpoint.
   *
   */
  constructor(
    accountName: string,
    options?: Models.DataLakeStorageClientOptions
  ) {
    if (accountName === null || accountName === undefined) {
      throw new Error("'accountName' cannot be null.");
    }

    if (!options) {
      options = {};
    }

    super(undefined, options);

    this.dnsSuffix = "dfs.core.windows.net";
    this.baseUri = "http://{accountName}.{dnsSuffix}";
    this.requestContentType = "application/json; charset=utf-8";
    this.accountName = accountName;

    this.addUserAgentInfo(`${packageName}/${packageVersion}`);
    if (options.xMsVersion !== null && options.xMsVersion !== undefined) {
      this.xMsVersion = options.xMsVersion;
    }
    if (options.dnsSuffix !== null && options.dnsSuffix !== undefined) {
      this.dnsSuffix = options.dnsSuffix;
    }
  }
}
