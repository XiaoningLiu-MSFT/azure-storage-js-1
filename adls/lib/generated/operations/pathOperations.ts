/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pathOperationsMappers";
import * as Parameters from "../models/parameters";
import { DataLakeStorageClientContext } from "../dataLakeStorageClientContext";

/** Class representing a PathOperations. */
export class PathOperations {
  private readonly client: DataLakeStorageClientContext;

  /**
   * Create a PathOperations.
   * @param {DataLakeStorageClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeStorageClientContext) {
    this.client = client;
  }

  /**
   * @summary List Paths
   *
   * List filesystem paths and their properties.
   *
   * @param {boolean} recursive If "true", all paths are listed; otherwise, only paths at the root of
   * the filesystem are listed.  If "directory" is specified, the list will only include paths that
   * share the same root.
   *
   * @param {string} filesystem The filesystem identifier.  The value must start and end with a
   * letter or number and must contain only letters, numbers, and the dash (-) character.
   * Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have
   * between 3 and 63 characters.
   *
   * @param {PathListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  list(recursive: boolean, filesystem: string): Promise<Models.PathListResponse>;
  list(recursive: boolean, filesystem: string, options: Models.PathListOptionalParams): Promise<Models.PathListResponse>;
  list(recursive: boolean, filesystem: string, callback: msRest.ServiceCallback<Models.PathList>): void;
  list(recursive: boolean, filesystem: string, options: Models.PathListOptionalParams, callback: msRest.ServiceCallback<Models.PathList>): void;
  list(recursive: boolean, filesystem: string, options?: Models.PathListOptionalParams, callback?: msRest.ServiceCallback<Models.PathList>): Promise<Models.PathListResponse> {
    return this.client.sendOperationRequest(
      {
        recursive,
        filesystem,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PathListResponse>;
  }

  /**
   * @summary Create File | Create Directory | Rename File | Rename Directory
   *
   * Create or rename a file or directory.    By default, the destination is overwritten and if the
   * destination already exists and has a lease the lease is broken.  This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * To fail if the destination already exists, use a conditional request with If-None-Match: "*".
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathCreateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  create(filesystem: string, path: string): Promise<Models.PathCreateResponse>;
  create(filesystem: string, path: string, options: Models.PathCreateOptionalParams): Promise<Models.PathCreateResponse>;
  create(filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  create(filesystem: string, path: string, options: Models.PathCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  create(filesystem: string, path: string, options?: Models.PathCreateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathCreateResponse> {
    return this.client.sendOperationRequest(
      {
        filesystem,
        path,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PathCreateResponse>;
  }

  /**
   * @summary Append Data | Flush Data | Set Properties | Set Access Control
   *
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets
   * properties for a file or directory, or sets access control for a file or directory. Data can
   * only be appended to a file. This operation supports conditional HTTP requests. For more
   * information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param {PathUpdateAction} action The action must be "append" to upload data to be appended to a
   * file, "flush" to flush previously uploaded data to a file, "setProperties" to set the properties
   * of a file or directory, or "setAccessControl" to set the owner, group, permissions, or access
   * control list for a file or directory.  Note that Hierarchical Namespace must be enabled for the
   * account in order to use access control.  Also note that the Access Control List (ACL) includes
   * permissions for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl
   * request headers are mutually exclusive. Possible values include: 'append', 'flush',
   * 'setProperties', 'setAccessControl'
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathUpdateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  update(action: Models.PathUpdateAction, filesystem: string, path: string): Promise<Models.PathUpdateResponse>;
  update(action: Models.PathUpdateAction, filesystem: string, path: string, options: Models.PathUpdateOptionalParams): Promise<Models.PathUpdateResponse>;
  update(action: Models.PathUpdateAction, filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  update(action: Models.PathUpdateAction, filesystem: string, path: string, options: Models.PathUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(action: Models.PathUpdateAction, filesystem: string, path: string, options?: Models.PathUpdateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        action,
        filesystem,
        path,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PathUpdateResponse>;
  }

  /**
   * @summary Lease Path
   *
   * Create and manage a lease to restrict write and delete access to the path. This operation
   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
   * for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param {PathLeaseAction} xMsLeaseAction There are five lease actions: "acquire", "break",
   * "change", "renew", and "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and
   * "x-ms-lease-duration" to acquire a new lease. Use "break" to break an existing lease. When a
   * lease is broken, the lease break period is allowed to elapse, during which time no lease
   * operation except break and release can be performed on the file. When a lease is successfully
   * broken, the response indicates the interval in seconds until a new lease can be acquired. Use
   * "change" and specify the current lease ID in "x-ms-lease-id" and the new lease ID in
   * "x-ms-proposed-lease-id" to change the lease ID of an active lease. Use "renew" and specify the
   * "x-ms-lease-id" to renew an existing lease. Use "release" and specify the "x-ms-lease-id" to
   * release a lease. Possible values include: 'acquire', 'break', 'change', 'renew', 'release'
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathLeaseOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string): Promise<Models.PathLeaseResponse>;
  lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options: Models.PathLeaseOptionalParams): Promise<Models.PathLeaseResponse>;
  lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options: Models.PathLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
  lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options?: Models.PathLeaseOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathLeaseResponse> {
    return this.client.sendOperationRequest(
      {
        xMsLeaseAction,
        filesystem,
        path,
        options
      },
      leaseOperationSpec,
      callback) as Promise<Models.PathLeaseResponse>;
  }

  /**
   * @summary Read File
   *
   * Read the contents of a file.  For read operations, range requests are supported. This operation
   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
   * for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathReadOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  read(filesystem: string, path: string): Promise<Models.PathReadResponse>;
  read(filesystem: string, path: string, options: Models.PathReadOptionalParams): Promise<Models.PathReadResponse>;
  read(filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  read(filesystem: string, path: string, options: Models.PathReadOptionalParams, callback: msRest.ServiceCallback<void>): void;
  read(filesystem: string, path: string, options?: Models.PathReadOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathReadResponse> {
    return this.client.sendOperationRequest(
      {
        filesystem,
        path,
        options
      },
      readOperationSpec,
      callback) as Promise<Models.PathReadResponse>;
  }

  /**
   * @summary Get Properties | Get Access Control List
   *
   * Get the properties for a file or directory, and optionally include the access control list.
   * This operation supports conditional HTTP requests.  For more information, see [Specifying
   * Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathGetPropertiesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getProperties(filesystem: string, path: string): Promise<Models.PathGetPropertiesResponse>;
  getProperties(filesystem: string, path: string, options: Models.PathGetPropertiesOptionalParams): Promise<Models.PathGetPropertiesResponse>;
  getProperties(filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  getProperties(filesystem: string, path: string, options: Models.PathGetPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getProperties(filesystem: string, path: string, options?: Models.PathGetPropertiesOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        filesystem,
        path,
        options
      },
      getPropertiesOperationSpec,
      callback) as Promise<Models.PathGetPropertiesResponse>;
  }

  /**
   * @summary Delete File | Delete Directory
   *
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param {string} filesystem The filesystem identifier.
   *
   * @param {string} path The file or directory path.
   *
   * @param {PathDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(filesystem: string, path: string): Promise<Models.PathDeleteResponse>;
  deleteMethod(filesystem: string, path: string, options: Models.PathDeleteMethodOptionalParams): Promise<Models.PathDeleteResponse>;
  deleteMethod(filesystem: string, path: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(filesystem: string, path: string, options: Models.PathDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(filesystem: string, path: string, options?: Models.PathDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.PathDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        filesystem,
        path,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PathDeleteResponse>;
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem0
  ],
  queryParameters: [
    Parameters.directory,
    Parameters.recursive0,
    Parameters.continuation,
    Parameters.maxResults,
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PathList,
      headersMapper: Mappers.PathListHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.resource2,
    Parameters.continuation,
    Parameters.mode,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.cacheControl,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.contentDisposition,
    Parameters.xMsCacheControl,
    Parameters.xMsContentType,
    Parameters.xMsContentEncoding,
    Parameters.xMsContentLanguage,
    Parameters.xMsContentDisposition,
    Parameters.xMsRenameSource,
    Parameters.xMsLeaseId,
    Parameters.xMsProposedLeaseId,
    Parameters.xMsSourceLeaseId,
    Parameters.xMsProperties,
    Parameters.xMsPermissions,
    Parameters.xMsUmask,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsSourceIfMatch,
    Parameters.xMsSourceIfNoneMatch,
    Parameters.xMsSourceIfModifiedSince,
    Parameters.xMsSourceIfUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    201: {
      headersMapper: Mappers.PathCreateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.action0,
    Parameters.position,
    Parameters.retainUncommittedData,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength,
    Parameters.xMsLeaseAction0,
    Parameters.xMsLeaseId,
    Parameters.xMsCacheControl,
    Parameters.xMsContentType,
    Parameters.xMsContentDisposition,
    Parameters.xMsContentEncoding,
    Parameters.xMsContentLanguage,
    Parameters.xMsProperties,
    Parameters.xMsOwner,
    Parameters.xMsGroup,
    Parameters.xMsPermissions,
    Parameters.xMsAcl,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "requestBody"
    ],
    mapper: {
      serializedName: "requestBody",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      headersMapper: Mappers.PathUpdateHeaders
    },
    202: {
      headersMapper: Mappers.PathUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const leaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.xMsLeaseAction1,
    Parameters.xMsLeaseDuration,
    Parameters.xMsLeaseBreakPeriod,
    Parameters.xMsLeaseId,
    Parameters.xMsProposedLeaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    201: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    202: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.range,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const getPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.action1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.dnsSuffix,
    Parameters.filesystem1,
    Parameters.path
  ],
  queryParameters: [
    Parameters.recursive1,
    Parameters.continuation,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.xMsLeaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.xMsClientRequestId,
    Parameters.xMsDate,
    Parameters.xMsVersion
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};
